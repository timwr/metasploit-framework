#ifndef HEADLESS

#include <errno.h>
#include <string.h>             // strcmp, strerror
#include <sys/utsname.h>        // uname

#include "liboffsetfinder64.hpp"
#include "getoffsets.h"

static offsets_t off;
static bool didInit = false;

offsets_t* get_offsets()
{
    //tihmstar::offsetfinder64 *fi = static_cast<tihmstar::offsetfinder64 *>(fi_);
    //
    if (!didInit){
        //off.base                                = 0xfffffff007004000;

//off.base                               = 0xfffffff007004000;
//off.sizeof_task                        = 0x550;
//off.task_itk_self                      = 0xd8;
//off.task_itk_registered                = 0x2e8;
//off.task_bsd_info                      = 0x360;
//off.proc_ucred                         = 0x100;
//off.vm_map_hdr                         = 0x10;
//off.ipc_space_is_task                  = 0x28;
//off.realhost_special                   = 0x10;
//off.iouserclient_ipc                   = 0x4;
//off.vtab_get_retain_count              = 0x3;
//off.vtab_get_external_trap_for_index   = 0xb7;
//off.zone_map                           = 0xfffffff007562160;
//off.kernel_map                         = 0xfffffff0075be058;
//off.kernel_task                        = 0xfffffff0075be050;
//off.realhost                           = 0xfffffff007544898;
//off.copyin                             = 0xfffffff00718baf8;
//off.copyout                            = 0xfffffff00718bd00;
//off.chgproccnt                         = 0xfffffff0073a0d48;
//off.kauth_cred_ref                     = 0xfffffff00737ab58;
//off.ipc_port_alloc_special             = 0xfffffff0070a1bf0;
//off.ipc_kobject_set                    = 0xfffffff0070b4e10;
//off.ipc_port_make_send                 = 0xfffffff0070a18a4;
//off.osserializer_serialize             = 0xfffffff007456cb8;
//off.rop_ldr_x0_x0_0x10                 = 0xfffffff007229194;
//off.root_vnode                         = 0xfffffff0075be0b8;
//off.vfs_context_current                = 0xfffffff0071dbe48;
//off.vnode_getfromfd                    = 0xfffffff0071c8824;
//off.vnode_getattr                      = 0xfffffff0071dd7ac;
//off.vnode_put                          = 0xfffffff0071bdd24;
//off.csblob_ent_dict_set                = 0xfffffff00737c274;
//off.sha1_init                          = 0xfffffff00746acec;
//off.sha1_update                        = 0xfffffff00746adc4;
//off.sha1_final                         = 0xfffffff00746af20;
//off.proc_find                          = 0xfffffff0073a1198;
//off.proc_name                          = 0xfffffff0073a1afc;
//off.proc_rele                          = 0xfffffff0073a119c;

        tihmstar::offsetfinder64 fi("/System/Library/Caches/com.apple.kernelcaches/kernelcache");

        off.sizeof_task                         = (kptr_t)fi.find_sizeof_task();
        off.task_itk_self                       = (kptr_t)fi.find_task_itk_self();
        off.task_itk_registered                 = (kptr_t)fi.find_task_itk_registered();
        off.task_bsd_info                       = (kptr_t)fi.find_task_bsd_info();
        off.proc_ucred                          = (kptr_t)fi.find_proc_ucred();
        off.vm_map_hdr                          = (kptr_t)fi.find_vm_map_hdr();
        off.ipc_space_is_task                   = (kptr_t)fi.find_ipc_space_is_task();
        off.realhost_special                    = 0x10;
        off.iouserclient_ipc                    = (kptr_t)fi.find_iouserclient_ipc();
        off.vtab_get_retain_count               = (kptr_t)fi.find_vtab_get_retain_count();
        off.vtab_get_external_trap_for_index    = (kptr_t)fi.find_vtab_get_external_trap_for_index();
        off.zone_map                            = (kptr_t)fi.find_zone_map();
        off.kernel_map                          = (kptr_t)fi.find_kernel_map();
        off.kernel_task                         = (kptr_t)fi.find_kernel_task();
        off.realhost                            = (kptr_t)fi.find_realhost();
        off.copyin                              = (kptr_t)fi.find_copyin();
        off.copyout                             = (kptr_t)fi.find_copyout();
        off.chgproccnt                          = (kptr_t)fi.find_chgproccnt();
        off.kauth_cred_ref                      = (kptr_t)fi.find_kauth_cred_ref();
        off.ipc_port_alloc_special              = (kptr_t)fi.find_ipc_port_alloc_special();
        off.ipc_kobject_set                     = (kptr_t)fi.find_ipc_kobject_set();
        off.ipc_port_make_send                  = (kptr_t)fi.find_ipc_port_make_send();
        off.osserializer_serialize              = (kptr_t)fi.find_osserializer_serialize();
        off.rop_ldr_x0_x0_0x10                  = (kptr_t)fi.find_rop_ldr_x0_x0_0x10();

        //off.root_vnode                          = (kptr_t)fi->find_rootvnode();

        //off.vfs_context_current                 = (kptr_t)fi->find_sym("_vfs_context_current");
        //off.vnode_getfromfd                     = (kptr_t)fi->find_sym("_vnode_getfromfd");
        //off.vnode_getattr                       = (kptr_t)fi->find_sym("_vnode_getattr");
        //off.vnode_put                           = (kptr_t)fi->find_sym("_vnode_put");
        //off.csblob_ent_dict_set                 = (kptr_t)fi->find_sym("_csblob_entitlements_dictionary_set");
        //off.sha1_init                           = (kptr_t)fi->find_sym("_SHA1Init");
        //off.sha1_update                         = (kptr_t)fi->find_sym("_SHA1Update");
        //off.sha1_final                          = (kptr_t)fi->find_sym("_SHA1Final");

        //off.proc_find                           = (kptr_t)fi->find_sym("_proc_find");
        //off.proc_name                           = (kptr_t)fi->find_sym("_proc_name");
        //off.proc_rele                           = (kptr_t)fi->find_sym("_proc_rele");

        didInit = true;
    }
    return &off;
}

#endif
